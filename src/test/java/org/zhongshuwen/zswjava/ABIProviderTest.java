/*
 * Copyright (c) 2017-2019 block.one all rights reserved.
 */

package org.zhongshuwen.zswjava;

import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.ListeningExecutorService;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.gson.Gson;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import org.zhongshuwen.zswjava.implementations.ABIProviderImpl;
import org.zhongshuwen.zswjava.interfaces.IABIProvider;
import org.zhongshuwen.zswjava.interfaces.IRPCProvider;
import org.zhongshuwen.zswjava.interfaces.ISerializationProvider;

import static junit.framework.TestCase.*;
import static org.mockito.Mockito.*;

import org.zhongshuwen.zswjava.models.ZSWName;
import org.zhongshuwen.zswjava.models.rpcProvider.request.GetRawAbiRequest;
import org.zhongshuwen.zswjava.models.rpcProvider.response.GetRawAbiResponse;
import org.checkerframework.checker.nullness.compatqual.NullableDecl;
import org.junit.Before;
import org.junit.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

public class ABIProviderTest {

    private IRPCProvider mockRpcProvider;
    private ISerializationProvider mockSerializationProvider;
    private String zswhqAbiJsonString;
    private String zswhqTokenAbiJsonString;
    private String chainId;

    @Before
    public void setup() {

        chainId = "687fa513e18843ad3e820744f4ffcf93b1354036d80737db8dc444fe4b15ad17";

        mockRpcProvider = mock(IRPCProvider.class);
        GetRawAbiRequest getRawAbiRequest = new GetRawAbiRequest("zswhq.token");

        String getRawAbiZswChainTokenJson = "{\n"
                + "    \"account_name\": \"zswhq.token\",\n"
                + "    \"code_hash\": \"3e0cf4172ab025f9fff5f1db11ee8a34d44779492e1d668ae1dc2d129e865348\",\n"
                + "    \"abi_hash\": \"43864d5af0fe294d44d19c612036cbe8c098414c4a12a5a7bb0bfe7db1556248\",\n"
                + "    \"abi\": \"DmVvc2lvOjphYmkvMS4wAQxhY2NvdW50X25hbWUEbmFtZQUIdHJhbnNmZXIABARmcm9tDGFjY291bnRfbmFtZQJ0bwxhY2NvdW50X25hbWUIcXVhbnRpdHkFYXNzZXQEbWVtbwZzdHJpbmcGY3JlYXRlAAIGaXNzdWVyDGFjY291bnRfbmFtZQ5tYXhpbXVtX3N1cHBseQVhc3NldAVpc3N1ZQADAnRvDGFjY291bnRfbmFtZQhxdWFudGl0eQVhc3NldARtZW1vBnN0cmluZwdhY2NvdW50AAEHYmFsYW5jZQVhc3NldA5jdXJyZW5jeV9zdGF0cwADBnN1cHBseQVhc3NldAptYXhfc3VwcGx5BWFzc2V0Bmlzc3VlcgxhY2NvdW50X25hbWUDAAAAVy08zc0IdHJhbnNmZXK8By0tLQp0aXRsZTogVG9rZW4gVHJhbnNmZXIKc3VtbWFyeTogVHJhbnNmZXIgdG9rZW5zIGZyb20gb25lIGFjY291bnQgdG8gYW5vdGhlci4KaWNvbjogaHR0cHM6Ly9jZG4udGVzdG5ldC5kZXYuYjFvcHMubmV0L3Rva2VuLXRyYW5zZmVyLnBuZyNjZTUxZWY5ZjllZWNhMzQzNGU4NTUwN2UwZWQ0OWU3NmZmZjEyNjU0MjJiZGVkMDI1NWYzMTk2ZWE1OWM4YjBjCi0tLQoKIyMgVHJhbnNmZXIgVGVybXMgJiBDb25kaXRpb25zCgpJLCB7e2Zyb219fSwgY2VydGlmeSB0aGUgZm9sbG93aW5nIHRvIGJlIHRydWUgdG8gdGhlIGJlc3Qgb2YgbXkga25vd2xlZGdlOgoKMS4gSSBjZXJ0aWZ5IHRoYXQge3txdWFudGl0eX19IGlzIG5vdCB0aGUgcHJvY2VlZHMgb2YgZnJhdWR1bGVudCBvciB2aW9sZW50IGFjdGl2aXRpZXMuCjIuIEkgY2VydGlmeSB0aGF0LCB0byB0aGUgYmVzdCBvZiBteSBrbm93bGVkZ2UsIHt7dG99fSBpcyBub3Qgc3VwcG9ydGluZyBpbml0aWF0aW9uIG9mIHZpb2xlbmNlIGFnYWluc3Qgb3RoZXJzLgozLiBJIGhhdmUgZGlzY2xvc2VkIGFueSBjb250cmFjdHVhbCB0ZXJtcyAmIGNvbmRpdGlvbnMgd2l0aCByZXNwZWN0IHRvIHt7cXVhbnRpdHl9fSB0byB7e3RvfX0uCgpJIHVuZGVyc3RhbmQgdGhhdCBmdW5kcyB0cmFuc2ZlcnMgYXJlIG5vdCByZXZlcnNpYmxlIGFmdGVyIHRoZSB7eyR0cmFuc2FjdGlvbi5kZWxheV9zZWN9fSBzZWNvbmRzIG9yIG90aGVyIGRlbGF5IGFzIGNvbmZpZ3VyZWQgYnkge3tmcm9tfX0ncyBwZXJtaXNzaW9ucy4KCklmIHRoaXMgYWN0aW9uIGZhaWxzIHRvIGJlIGlycmV2ZXJzaWJseSBjb25maXJtZWQgYWZ0ZXIgcmVjZWl2aW5nIGdvb2RzIG9yIHNlcnZpY2VzIGZyb20gJ3t7dG99fScsIEkgYWdyZWUgdG8gZWl0aGVyIHJldHVybiB0aGUgZ29vZHMgb3Igc2VydmljZXMgb3IgcmVzZW5kIHt7cXVhbnRpdHl9fSBpbiBhIHRpbWVseSBtYW5uZXIuAAAAAAClMXYFaXNzdWUAAAAAAKhs1EUGY3JlYXRlAAIAAAA4T00RMgNpNjQBCGN1cnJlbmN5AQZ1aW50NjQHYWNjb3VudAAAAAAAkE3GA2k2NAEIY3VycmVuY3kBBnVpbnQ2NA5jdXJyZW5jeV9zdGF0cwAAAAA==\"\n"
                + "}";

        Gson gson = new Gson();
        final GetRawAbiResponse getRawAbiZswChainTokenResponse = gson.fromJson(getRawAbiZswChainTokenJson, GetRawAbiResponse.class);

        String getRawAbiZswChainJson = "{\n"
                + "    \"account_name\": \"zswhq\",\n"
                + "    \"code_hash\": \"add7914493bb911bbc179b19115032bbaae1f567f733391060edfaf79a6c8096\",\n"
                + "    \"abi_hash\": \"d745bac0c38f95613e0c1c2da58e92de1e8e94d658d64a00293570cc251d1441\",\n"
                + "    \"abi\": \"DmVvc2lvOjphYmkvMS4xADYIYWJpX2hhc2gAAgVvd25lcgRuYW1lBGhhc2gLY2hlY2tzdW0yNTYJYXV0aG9yaXR5AAQJdGhyZXNob2xkBnVpbnQzMgRrZXlzDGtleV93ZWlnaHRbXQhhY2NvdW50cxlwZXJtaXNzaW9uX2xldmVsX3dlaWdodFtdBXdhaXRzDXdhaXRfd2VpZ2h0W10KYmlkX3JlZnVuZAACBmJpZGRlcgRuYW1lBmFtb3VudAVhc3NldAdiaWRuYW1lAAMGYmlkZGVyBG5hbWUHbmV3bmFtZQRuYW1lA2JpZAVhc3NldAliaWRyZWZ1bmQAAgZiaWRkZXIEbmFtZQduZXduYW1lBG5hbWUMYmxvY2tfaGVhZGVyAAgJdGltZXN0YW1wBnVpbnQzMghwcm9kdWNlcgRuYW1lCWNvbmZpcm1lZAZ1aW50MTYIcHJldmlvdXMLY2hlY2tzdW0yNTYRdHJhbnNhY3Rpb25fbXJvb3QLY2hlY2tzdW0yNTYMYWN0aW9uX21yb290C2NoZWNrc3VtMjU2EHNjaGVkdWxlX3ZlcnNpb24GdWludDMyDW5ld19wcm9kdWNlcnMScHJvZHVjZXJfc2NoZWR1bGU/FWJsb2NrY2hhaW5fcGFyYW1ldGVycwARE21heF9ibG9ja19uZXRfdXNhZ2UGdWludDY0GnRhcmdldF9ibG9ja19uZXRfdXNhZ2VfcGN0BnVpbnQzMhltYXhfdHJhbnNhY3Rpb25fbmV0X3VzYWdlBnVpbnQzMh5iYXNlX3Blcl90cmFuc2FjdGlvbl9uZXRfdXNhZ2UGdWludDMyEG5ldF91c2FnZV9sZWV3YXkGdWludDMyI2NvbnRleHRfZnJlZV9kaXNjb3VudF9uZXRfdXNhZ2VfbnVtBnVpbnQzMiNjb250ZXh0X2ZyZWVfZGlzY291bnRfbmV0X3VzYWdlX2RlbgZ1aW50MzITbWF4X2Jsb2NrX2NwdV91c2FnZQZ1aW50MzIadGFyZ2V0X2Jsb2NrX2NwdV91c2FnZV9wY3QGdWludDMyGW1heF90cmFuc2FjdGlvbl9jcHVfdXNhZ2UGdWludDMyGW1pbl90cmFuc2FjdGlvbl9jcHVfdXNhZ2UGdWludDMyGG1heF90cmFuc2FjdGlvbl9saWZldGltZQZ1aW50MzIeZGVmZXJyZWRfdHJ4X2V4cGlyYXRpb25fd2luZG93BnVpbnQzMhVtYXhfdHJhbnNhY3Rpb25fZGVsYXkGdWludDMyFm1heF9pbmxpbmVfYWN0aW9uX3NpemUGdWludDMyF21heF9pbmxpbmVfYWN0aW9uX2RlcHRoBnVpbnQxNhNtYXhfYXV0aG9yaXR5X2RlcHRoBnVpbnQxNgZidXlyYW0AAwVwYXllcgRuYW1lCHJlY2VpdmVyBG5hbWUFcXVhbnQFYXNzZXQLYnV5cmFtYnl0ZXMAAwVwYXllcgRuYW1lCHJlY2VpdmVyBG5hbWUFYnl0ZXMGdWludDMyC2NhbmNlbGRlbGF5AAIOY2FuY2VsaW5nX2F1dGgQcGVybWlzc2lvbl9sZXZlbAZ0cnhfaWQLY2hlY2tzdW0yNTYMY2xhaW1yZXdhcmRzAAEFb3duZXIEbmFtZQljb25uZWN0b3IAAgdiYWxhbmNlBWFzc2V0BndlaWdodAdmbG9hdDY0CmRlbGVnYXRlYncABQRmcm9tBG5hbWUIcmVjZWl2ZXIEbmFtZRJzdGFrZV9uZXRfcXVhbnRpdHkFYXNzZXQSc3Rha2VfY3B1X3F1YW50aXR5BWFzc2V0CHRyYW5zZmVyBGJvb2wTZGVsZWdhdGVkX2JhbmR3aWR0aAAEBGZyb20EbmFtZQJ0bwRuYW1lCm5ldF93ZWlnaHQFYXNzZXQKY3B1X3dlaWdodAVhc3NldApkZWxldGVhdXRoAAIHYWNjb3VudARuYW1lCnBlcm1pc3Npb24EbmFtZRJlb3Npb19nbG9iYWxfc3RhdGUVYmxvY2tjaGFpbl9wYXJhbWV0ZXJzDQxtYXhfcmFtX3NpemUGdWludDY0GHRvdGFsX3JhbV9ieXRlc19yZXNlcnZlZAZ1aW50NjQPdG90YWxfcmFtX3N0YWtlBWludDY0HWxhc3RfcHJvZHVjZXJfc2NoZWR1bGVfdXBkYXRlFGJsb2NrX3RpbWVzdGFtcF90eXBlGGxhc3RfcGVydm90ZV9idWNrZXRfZmlsbAp0aW1lX3BvaW50DnBlcnZvdGVfYnVja2V0BWludDY0D3BlcmJsb2NrX2J1Y2tldAVpbnQ2NBN0b3RhbF91bnBhaWRfYmxvY2tzBnVpbnQzMhV0b3RhbF9hY3RpdmF0ZWRfc3Rha2UFaW50NjQbdGhyZXNoX2FjdGl2YXRlZF9zdGFrZV90aW1lCnRpbWVfcG9pbnQbbGFzdF9wcm9kdWNlcl9zY2hlZHVsZV9zaXplBnVpbnQxNhp0b3RhbF9wcm9kdWNlcl92b3RlX3dlaWdodAdmbG9hdDY0D2xhc3RfbmFtZV9jbG9zZRRibG9ja190aW1lc3RhbXBfdHlwZRNlb3Npb19nbG9iYWxfc3RhdGUyAAURbmV3X3JhbV9wZXJfYmxvY2sGdWludDE2EWxhc3RfcmFtX2luY3JlYXNlFGJsb2NrX3RpbWVzdGFtcF90eXBlDmxhc3RfYmxvY2tfbnVtFGJsb2NrX3RpbWVzdGFtcF90eXBlHHRvdGFsX3Byb2R1Y2VyX3ZvdGVwYXlfc2hhcmUHZmxvYXQ2NAhyZXZpc2lvbgV1aW50OBNlb3Npb19nbG9iYWxfc3RhdGUzAAIWbGFzdF92cGF5X3N0YXRlX3VwZGF0ZQp0aW1lX3BvaW50HHRvdGFsX3ZwYXlfc2hhcmVfY2hhbmdlX3JhdGUHZmxvYXQ2NA5leGNoYW5nZV9zdGF0ZQADBnN1cHBseQVhc3NldARiYXNlCWNvbm5lY3RvcgVxdW90ZQljb25uZWN0b3IEaW5pdAACB3ZlcnNpb24JdmFydWludDMyBGNvcmUGc3ltYm9sCmtleV93ZWlnaHQAAgNrZXkKcHVibGljX2tleQZ3ZWlnaHQGdWludDE2CGxpbmthdXRoAAQHYWNjb3VudARuYW1lBGNvZGUEbmFtZQR0eXBlBG5hbWULcmVxdWlyZW1lbnQEbmFtZQhuYW1lX2JpZAAEB25ld25hbWUEbmFtZQtoaWdoX2JpZGRlcgRuYW1lCGhpZ2hfYmlkBWludDY0DWxhc3RfYmlkX3RpbWUKdGltZV9wb2ludApuZXdhY2NvdW50AAQHY3JlYXRvcgRuYW1lBG5hbWUEbmFtZQVvd25lcglhdXRob3JpdHkGYWN0aXZlCWF1dGhvcml0eQdvbmJsb2NrAAEGaGVhZGVyDGJsb2NrX2hlYWRlcgdvbmVycm9yAAIJc2VuZGVyX2lkB3VpbnQxMjgIc2VudF90cngFYnl0ZXMQcGVybWlzc2lvbl9sZXZlbAACBWFjdG9yBG5hbWUKcGVybWlzc2lvbgRuYW1lF3Blcm1pc3Npb25fbGV2ZWxfd2VpZ2h0AAIKcGVybWlzc2lvbhBwZXJtaXNzaW9uX2xldmVsBndlaWdodAZ1aW50MTYNcHJvZHVjZXJfaW5mbwAIBW93bmVyBG5hbWULdG90YWxfdm90ZXMHZmxvYXQ2NAxwcm9kdWNlcl9rZXkKcHVibGljX2tleQlpc19hY3RpdmUEYm9vbAN1cmwGc3RyaW5nDXVucGFpZF9ibG9ja3MGdWludDMyD2xhc3RfY2xhaW1fdGltZQp0aW1lX3BvaW50CGxvY2F0aW9uBnVpbnQxNg5wcm9kdWNlcl9pbmZvMgADBW93bmVyBG5hbWUNdm90ZXBheV9zaGFyZQdmbG9hdDY0GWxhc3Rfdm90ZXBheV9zaGFyZV91cGRhdGUKdGltZV9wb2ludAxwcm9kdWNlcl9rZXkAAg1wcm9kdWNlcl9uYW1lBG5hbWURYmxvY2tfc2lnbmluZ19rZXkKcHVibGljX2tleRFwcm9kdWNlcl9zY2hlZHVsZQACB3ZlcnNpb24GdWludDMyCXByb2R1Y2Vycw5wcm9kdWNlcl9rZXlbXQZyZWZ1bmQAAQVvd25lcgRuYW1lDnJlZnVuZF9yZXF1ZXN0AAQFb3duZXIEbmFtZQxyZXF1ZXN0X3RpbWUOdGltZV9wb2ludF9zZWMKbmV0X2Ftb3VudAVhc3NldApjcHVfYW1vdW50BWFzc2V0C3JlZ3Byb2R1Y2VyAAQIcHJvZHVjZXIEbmFtZQxwcm9kdWNlcl9rZXkKcHVibGljX2tleQN1cmwGc3RyaW5nCGxvY2F0aW9uBnVpbnQxNghyZWdwcm94eQACBXByb3h5BG5hbWUHaXNwcm94eQRib29sC3JtdnByb2R1Y2VyAAEIcHJvZHVjZXIEbmFtZQdzZWxscmFtAAIHYWNjb3VudARuYW1lBWJ5dGVzBWludDY0BnNldGFiaQACB2FjY291bnQEbmFtZQNhYmkFYnl0ZXMKc2V0YWxpbWl0cwAEB2FjY291bnQEbmFtZQlyYW1fYnl0ZXMFaW50NjQKbmV0X3dlaWdodAVpbnQ2NApjcHVfd2VpZ2h0BWludDY0B3NldGNvZGUABAdhY2NvdW50BG5hbWUGdm10eXBlBXVpbnQ4CXZtdmVyc2lvbgV1aW50OARjb2RlBWJ5dGVzCXNldHBhcmFtcwABBnBhcmFtcxVibG9ja2NoYWluX3BhcmFtZXRlcnMHc2V0cHJpdgACB2FjY291bnQEbmFtZQdpc19wcml2BXVpbnQ4BnNldHJhbQABDG1heF9yYW1fc2l6ZQZ1aW50NjQKc2V0cmFtcmF0ZQABD2J5dGVzX3Blcl9ibG9jawZ1aW50MTYMdW5kZWxlZ2F0ZWJ3AAQEZnJvbQRuYW1lCHJlY2VpdmVyBG5hbWUUdW5zdGFrZV9uZXRfcXVhbnRpdHkFYXNzZXQUdW5zdGFrZV9jcHVfcXVhbnRpdHkFYXNzZXQKdW5saW5rYXV0aAADB2FjY291bnQEbmFtZQRjb2RlBG5hbWUEdHlwZQRuYW1lCXVucmVncHJvZAABCHByb2R1Y2VyBG5hbWUKdXBkYXRlYXV0aAAEB2FjY291bnQEbmFtZQpwZXJtaXNzaW9uBG5hbWUGcGFyZW50BG5hbWUEYXV0aAlhdXRob3JpdHkMdXBkdHJldmlzaW9uAAEIcmV2aXNpb24FdWludDgOdXNlcl9yZXNvdXJjZXMABAVvd25lcgRuYW1lCm5ldF93ZWlnaHQFYXNzZXQKY3B1X3dlaWdodAVhc3NldAlyYW1fYnl0ZXMFaW50NjQMdm90ZXByb2R1Y2VyAAMFdm90ZXIEbmFtZQVwcm94eQRuYW1lCXByb2R1Y2VycwZuYW1lW10Kdm90ZXJfaW5mbwAKBW93bmVyBG5hbWUFcHJveHkEbmFtZQlwcm9kdWNlcnMGbmFtZVtdBnN0YWtlZAVpbnQ2NBBsYXN0X3ZvdGVfd2VpZ2h0B2Zsb2F0NjQTcHJveGllZF92b3RlX3dlaWdodAdmbG9hdDY0CGlzX3Byb3h5BGJvb2wJcmVzZXJ2ZWQxBnVpbnQzMglyZXNlcnZlZDIGdWludDMyCXJlc2VydmVkMwVhc3NldAt3YWl0X3dlaWdodAACCHdhaXRfc2VjBnVpbnQzMgZ3ZWlnaHQGdWludDE2HwAAAEBJM5M7B2JpZG5hbWUAAABIUy91kzsJYmlkcmVmdW5kAAAAAABIc70+BmJ1eXJhbQAAsMr+SHO9PgtidXlyYW1ieXRlcwAAvIkqRYWmQQtjYW5jZWxkZWxheQCA0zVcXelMRAxjbGFpbXJld2FyZHMAAAA/KhumokoKZGVsZWdhdGVidwAAQMvaqKyiSgpkZWxldGVhdXRoAAAAAAAAkN10BGluaXQAAAAALWsDp4sIbGlua2F1dGgAAECemiJkuJoKbmV3YWNjb3VudAAAAAAAIhrPpAdvbmJsb2NrAAAAAODSe9WkB29uZXJyb3IAAAAAAKSpl7oGcmVmdW5kAACuQjrRW5m6C3JlZ3Byb2R1Y2VyAAAAAL7TW5m6CHJlZ3Byb3h5AACuQjrRW7e8C3JtdnByb2R1Y2VyAAAAAECaG6PCB3NlbGxyYW0AAAAAALhjssIGc2V0YWJpAAAAzk66aLLCCnNldGFsaW1pdHMAAAAAQCWKssIHc2V0Y29kZQAAAMDSXFOzwglzZXRwYXJhbXMAAAAAYLtbs8IHc2V0cHJpdgAAAAAASHOzwgZzZXRyYW0AAIDK5kpzs8IKc2V0cmFtcmF0ZQDAj8qGqajS1Ax1bmRlbGVnYXRlYncAAEDL2sDp4tQKdW5saW5rYXV0aAAAAEj0Vqbu1Al1bnJlZ3Byb2QAAEDL2qhsUtUKdXBkYXRlYXV0aAAwqcNuq5tT1Qx1cGR0cmV2aXNpb24AcBXSid6qMt0Mdm90ZXByb2R1Y2VyAA0AAACgYdPcMQNpNjQAAAhhYmlfaGFzaAAATlMvdZM7A2k2NAAACmJpZF9yZWZ1bmQAAAAgTXOiSgNpNjQAABNkZWxlZ2F0ZWRfYmFuZHdpZHRoAAAAAERzaGQDaTY0AAASZW9zaW9fZ2xvYmFsX3N0YXRlAAAAQERzaGQDaTY0AAATZW9zaW9fZ2xvYmFsX3N0YXRlMgAAAGBEc2hkA2k2NAAAE2Vvc2lvX2dsb2JhbF9zdGF0ZTMAAAA4uaOkmQNpNjQAAAhuYW1lX2JpZAAAwFchneitA2k2NAAADXByb2R1Y2VyX2luZm8AgMBXIZ3orQNpNjQAAA5wcm9kdWNlcl9pbmZvMgAAyApeI6W5A2k2NAAADmV4Y2hhbmdlX3N0YXRlAAAAAKepl7oDaTY0AAAOcmVmdW5kX3JlcXVlc3QAAAAAq3sV1gNpNjQAAA51c2VyX3Jlc291cmNlcwAAAADgqzLdA2k2NAAACnZvdGVyX2luZm8AAAAA=\"\n"
                + "}";
        final GetRawAbiResponse getRawAbiZswChainResponse = gson.fromJson(getRawAbiZswChainJson, GetRawAbiResponse.class);

        String getRawAbiZswChainBadJson = "{\n"
                + "    \"account_name\": \"zswhq.bad\",\n"
                + "    \"code_hash\": \"add7914493bb911bbc179b19115032bbaae1f567f733391060edfaf79a6c8096\",\n"
                + "    \"abi_hash\": \"d745bac0c38f95613e0c1c2da58e92de1e8e94d658d64a00293570cc251d1441\",\n"
                + "    \"abi\": \"@DmVvc2lvOjphYmkvMS4xADYIYWJpX2hhc2gAAgVvd25lcgRuYW1lBGhhc2gLY2hlY2tzdW0yNTYJYXV0aG9yaXR5AAQJdGhyZXNob2xkBnVpbnQzMgRrZXlzDGtleV93ZWlnaHRbXQhhY2NvdW50cxlwZXJtaXNzaW9uX2xldmVsX3dlaWdodFtdBXdhaXRzDXdhaXRfd2VpZ2h0W10KYmlkX3JlZnVuZAACBmJpZGRlcgRuYW1lBmFtb3VudAVhc3NldAdiaWRuYW1lAAMGYmlkZGVyBG5hbWUHbmV3bmFtZQRuYW1lA2JpZAVhc3NldAliaWRyZWZ1bmQAAgZiaWRkZXIEbmFtZQduZXduYW1lBG5hbWUMYmxvY2tfaGVhZGVyAAgJdGltZXN0YW1wBnVpbnQzMghwcm9kdWNlcgRuYW1lCWNvbmZpcm1lZAZ1aW50MTYIcHJldmlvdXMLY2hlY2tzdW0yNTYRdHJhbnNhY3Rpb25fbXJvb3QLY2hlY2tzdW0yNTYMYWN0aW9uX21yb290C2NoZWNrc3VtMjU2EHNjaGVkdWxlX3ZlcnNpb24GdWludDMyDW5ld19wcm9kdWNlcnMScHJvZHVjZXJfc2NoZWR1bGU/FWJsb2NrY2hhaW5fcGFyYW1ldGVycwARE21heF9ibG9ja19uZXRfdXNhZ2UGdWludDY0GnRhcmdldF9ibG9ja19uZXRfdXNhZ2VfcGN0BnVpbnQzMhltYXhfdHJhbnNhY3Rpb25fbmV0X3VzYWdlBnVpbnQzMh5iYXNlX3Blcl90cmFuc2FjdGlvbl9uZXRfdXNhZ2UGdWludDMyEG5ldF91c2FnZV9sZWV3YXkGdWludDMyI2NvbnRleHRfZnJlZV9kaXNjb3VudF9uZXRfdXNhZ2VfbnVtBnVpbnQzMiNjb250ZXh0X2ZyZWVfZGlzY291bnRfbmV0X3VzYWdlX2RlbgZ1aW50MzITbWF4X2Jsb2NrX2NwdV91c2FnZQZ1aW50MzIadGFyZ2V0X2Jsb2NrX2NwdV91c2FnZV9wY3QGdWludDMyGW1heF90cmFuc2FjdGlvbl9jcHVfdXNhZ2UGdWludDMyGW1pbl90cmFuc2FjdGlvbl9jcHVfdXNhZ2UGdWludDMyGG1heF90cmFuc2FjdGlvbl9saWZldGltZQZ1aW50MzIeZGVmZXJyZWRfdHJ4X2V4cGlyYXRpb25fd2luZG93BnVpbnQzMhVtYXhfdHJhbnNhY3Rpb25fZGVsYXkGdWludDMyFm1heF9pbmxpbmVfYWN0aW9uX3NpemUGdWludDMyF21heF9pbmxpbmVfYWN0aW9uX2RlcHRoBnVpbnQxNhNtYXhfYXV0aG9yaXR5X2RlcHRoBnVpbnQxNgZidXlyYW0AAwVwYXllcgRuYW1lCHJlY2VpdmVyBG5hbWUFcXVhbnQFYXNzZXQLYnV5cmFtYnl0ZXMAAwVwYXllcgRuYW1lCHJlY2VpdmVyBG5hbWUFYnl0ZXMGdWludDMyC2NhbmNlbGRlbGF5AAIOY2FuY2VsaW5nX2F1dGgQcGVybWlzc2lvbl9sZXZlbAZ0cnhfaWQLY2hlY2tzdW0yNTYMY2xhaW1yZXdhcmRzAAEFb3duZXIEbmFtZQljb25uZWN0b3IAAgdiYWxhbmNlBWFzc2V0BndlaWdodAdmbG9hdDY0CmRlbGVnYXRlYncABQRmcm9tBG5hbWUIcmVjZWl2ZXIEbmFtZRJzdGFrZV9uZXRfcXVhbnRpdHkFYXNzZXQSc3Rha2VfY3B1X3F1YW50aXR5BWFzc2V0CHRyYW5zZmVyBGJvb2wTZGVsZWdhdGVkX2JhbmR3aWR0aAAEBGZyb20EbmFtZQJ0bwRuYW1lCm5ldF93ZWlnaHQFYXNzZXQKY3B1X3dlaWdodAVhc3NldApkZWxldGVhdXRoAAIHYWNjb3VudARuYW1lCnBlcm1pc3Npb24EbmFtZRJlb3Npb19nbG9iYWxfc3RhdGUVYmxvY2tjaGFpbl9wYXJhbWV0ZXJzDQxtYXhfcmFtX3NpemUGdWludDY0GHRvdGFsX3JhbV9ieXRlc19yZXNlcnZlZAZ1aW50NjQPdG90YWxfcmFtX3N0YWtlBWludDY0HWxhc3RfcHJvZHVjZXJfc2NoZWR1bGVfdXBkYXRlFGJsb2NrX3RpbWVzdGFtcF90eXBlGGxhc3RfcGVydm90ZV9idWNrZXRfZmlsbAp0aW1lX3BvaW50DnBlcnZvdGVfYnVja2V0BWludDY0D3BlcmJsb2NrX2J1Y2tldAVpbnQ2NBN0b3RhbF91bnBhaWRfYmxvY2tzBnVpbnQzMhV0b3RhbF9hY3RpdmF0ZWRfc3Rha2UFaW50NjQbdGhyZXNoX2FjdGl2YXRlZF9zdGFrZV90aW1lCnRpbWVfcG9pbnQbbGFzdF9wcm9kdWNlcl9zY2hlZHVsZV9zaXplBnVpbnQxNhp0b3RhbF9wcm9kdWNlcl92b3RlX3dlaWdodAdmbG9hdDY0D2xhc3RfbmFtZV9jbG9zZRRibG9ja190aW1lc3RhbXBfdHlwZRNlb3Npb19nbG9iYWxfc3RhdGUyAAURbmV3X3JhbV9wZXJfYmxvY2sGdWludDE2EWxhc3RfcmFtX2luY3JlYXNlFGJsb2NrX3RpbWVzdGFtcF90eXBlDmxhc3RfYmxvY2tfbnVtFGJsb2NrX3RpbWVzdGFtcF90eXBlHHRvdGFsX3Byb2R1Y2VyX3ZvdGVwYXlfc2hhcmUHZmxvYXQ2NAhyZXZpc2lvbgV1aW50OBNlb3Npb19nbG9iYWxfc3RhdGUzAAIWbGFzdF92cGF5X3N0YXRlX3VwZGF0ZQp0aW1lX3BvaW50HHRvdGFsX3ZwYXlfc2hhcmVfY2hhbmdlX3JhdGUHZmxvYXQ2NA5leGNoYW5nZV9zdGF0ZQADBnN1cHBseQVhc3NldARiYXNlCWNvbm5lY3RvcgVxdW90ZQljb25uZWN0b3IEaW5pdAACB3ZlcnNpb24JdmFydWludDMyBGNvcmUGc3ltYm9sCmtleV93ZWlnaHQAAgNrZXkKcHVibGljX2tleQZ3ZWlnaHQGdWludDE2CGxpbmthdXRoAAQHYWNjb3VudARuYW1lBGNvZGUEbmFtZQR0eXBlBG5hbWULcmVxdWlyZW1lbnQEbmFtZQhuYW1lX2JpZAAEB25ld25hbWUEbmFtZQtoaWdoX2JpZGRlcgRuYW1lCGhpZ2hfYmlkBWludDY0DWxhc3RfYmlkX3RpbWUKdGltZV9wb2ludApuZXdhY2NvdW50AAQHY3JlYXRvcgRuYW1lBG5hbWUEbmFtZQVvd25lcglhdXRob3JpdHkGYWN0aXZlCWF1dGhvcml0eQdvbmJsb2NrAAEGaGVhZGVyDGJsb2NrX2hlYWRlcgdvbmVycm9yAAIJc2VuZGVyX2lkB3VpbnQxMjgIc2VudF90cngFYnl0ZXMQcGVybWlzc2lvbl9sZXZlbAACBWFjdG9yBG5hbWUKcGVybWlzc2lvbgRuYW1lF3Blcm1pc3Npb25fbGV2ZWxfd2VpZ2h0AAIKcGVybWlzc2lvbhBwZXJtaXNzaW9uX2xldmVsBndlaWdodAZ1aW50MTYNcHJvZHVjZXJfaW5mbwAIBW93bmVyBG5hbWULdG90YWxfdm90ZXMHZmxvYXQ2NAxwcm9kdWNlcl9rZXkKcHVibGljX2tleQlpc19hY3RpdmUEYm9vbAN1cmwGc3RyaW5nDXVucGFpZF9ibG9ja3MGdWludDMyD2xhc3RfY2xhaW1fdGltZQp0aW1lX3BvaW50CGxvY2F0aW9uBnVpbnQxNg5wcm9kdWNlcl9pbmZvMgADBW93bmVyBG5hbWUNdm90ZXBheV9zaGFyZQdmbG9hdDY0GWxhc3Rfdm90ZXBheV9zaGFyZV91cGRhdGUKdGltZV9wb2ludAxwcm9kdWNlcl9rZXkAAg1wcm9kdWNlcl9uYW1lBG5hbWURYmxvY2tfc2lnbmluZ19rZXkKcHVibGljX2tleRFwcm9kdWNlcl9zY2hlZHVsZQACB3ZlcnNpb24GdWludDMyCXByb2R1Y2Vycw5wcm9kdWNlcl9rZXlbXQZyZWZ1bmQAAQVvd25lcgRuYW1lDnJlZnVuZF9yZXF1ZXN0AAQFb3duZXIEbmFtZQxyZXF1ZXN0X3RpbWUOdGltZV9wb2ludF9zZWMKbmV0X2Ftb3VudAVhc3NldApjcHVfYW1vdW50BWFzc2V0C3JlZ3Byb2R1Y2VyAAQIcHJvZHVjZXIEbmFtZQxwcm9kdWNlcl9rZXkKcHVibGljX2tleQN1cmwGc3RyaW5nCGxvY2F0aW9uBnVpbnQxNghyZWdwcm94eQACBXByb3h5BG5hbWUHaXNwcm94eQRib29sC3JtdnByb2R1Y2VyAAEIcHJvZHVjZXIEbmFtZQdzZWxscmFtAAIHYWNjb3VudARuYW1lBWJ5dGVzBWludDY0BnNldGFiaQACB2FjY291bnQEbmFtZQNhYmkFYnl0ZXMKc2V0YWxpbWl0cwAEB2FjY291bnQEbmFtZQlyYW1fYnl0ZXMFaW50NjQKbmV0X3dlaWdodAVpbnQ2NApjcHVfd2VpZ2h0BWludDY0B3NldGNvZGUABAdhY2NvdW50BG5hbWUGdm10eXBlBXVpbnQ4CXZtdmVyc2lvbgV1aW50OARjb2RlBWJ5dGVzCXNldHBhcmFtcwABBnBhcmFtcxVibG9ja2NoYWluX3BhcmFtZXRlcnMHc2V0cHJpdgACB2FjY291bnQEbmFtZQdpc19wcml2BXVpbnQ4BnNldHJhbQABDG1heF9yYW1fc2l6ZQZ1aW50NjQKc2V0cmFtcmF0ZQABD2J5dGVzX3Blcl9ibG9jawZ1aW50MTYMdW5kZWxlZ2F0ZWJ3AAQEZnJvbQRuYW1lCHJlY2VpdmVyBG5hbWUUdW5zdGFrZV9uZXRfcXVhbnRpdHkFYXNzZXQUdW5zdGFrZV9jcHVfcXVhbnRpdHkFYXNzZXQKdW5saW5rYXV0aAADB2FjY291bnQEbmFtZQRjb2RlBG5hbWUEdHlwZQRuYW1lCXVucmVncHJvZAABCHByb2R1Y2VyBG5hbWUKdXBkYXRlYXV0aAAEB2FjY291bnQEbmFtZQpwZXJtaXNzaW9uBG5hbWUGcGFyZW50BG5hbWUEYXV0aAlhdXRob3JpdHkMdXBkdHJldmlzaW9uAAEIcmV2aXNpb24FdWludDgOdXNlcl9yZXNvdXJjZXMABAVvd25lcgRuYW1lCm5ldF93ZWlnaHQFYXNzZXQKY3B1X3dlaWdodAVhc3NldAlyYW1fYnl0ZXMFaW50NjQMdm90ZXByb2R1Y2VyAAMFdm90ZXIEbmFtZQVwcm94eQRuYW1lCXByb2R1Y2VycwZuYW1lW10Kdm90ZXJfaW5mbwAKBW93bmVyBG5hbWUFcHJveHkEbmFtZQlwcm9kdWNlcnMGbmFtZVtdBnN0YWtlZAVpbnQ2NBBsYXN0X3ZvdGVfd2VpZ2h0B2Zsb2F0NjQTcHJveGllZF92b3RlX3dlaWdodAdmbG9hdDY0CGlzX3Byb3h5BGJvb2wJcmVzZXJ2ZWQxBnVpbnQzMglyZXNlcnZlZDIGdWludDMyCXJlc2VydmVkMwVhc3NldAt3YWl0X3dlaWdodAACCHdhaXRfc2VjBnVpbnQzMgZ3ZWlnaHQGdWludDE2HwAAAEBJM5M7B2JpZG5hbWUAAABIUy91kzsJYmlkcmVmdW5kAAAAAABIc70+BmJ1eXJhbQAAsMr+SHO9PgtidXlyYW1ieXRlcwAAvIkqRYWmQQtjYW5jZWxkZWxheQCA0zVcXelMRAxjbGFpbXJld2FyZHMAAAA/KhumokoKZGVsZWdhdGVidwAAQMvaqKyiSgpkZWxldGVhdXRoAAAAAAAAkN10BGluaXQAAAAALWsDp4sIbGlua2F1dGgAAECemiJkuJoKbmV3YWNjb3VudAAAAAAAIhrPpAdvbmJsb2NrAAAAAODSe9WkB29uZXJyb3IAAAAAAKSpl7oGcmVmdW5kAACuQjrRW5m6C3JlZ3Byb2R1Y2VyAAAAAL7TW5m6CHJlZ3Byb3h5AACuQjrRW7e8C3JtdnByb2R1Y2VyAAAAAECaG6PCB3NlbGxyYW0AAAAAALhjssIGc2V0YWJpAAAAzk66aLLCCnNldGFsaW1pdHMAAAAAQCWKssIHc2V0Y29kZQAAAMDSXFOzwglzZXRwYXJhbXMAAAAAYLtbs8IHc2V0cHJpdgAAAAAASHOzwgZzZXRyYW0AAIDK5kpzs8IKc2V0cmFtcmF0ZQDAj8qGqajS1Ax1bmRlbGVnYXRlYncAAEDL2sDp4tQKdW5saW5rYXV0aAAAAEj0Vqbu1Al1bnJlZ3Byb2QAAEDL2qhsUtUKdXBkYXRlYXV0aAAwqcNuq5tT1Qx1cGR0cmV2aXNpb24AcBXSid6qMt0Mdm90ZXByb2R1Y2VyAA0AAACgYdPcMQNpNjQAAAhhYmlfaGFzaAAATlMvdZM7A2k2NAAACmJpZF9yZWZ1bmQAAAAgTXOiSgNpNjQAABNkZWxlZ2F0ZWRfYmFuZHdpZHRoAAAAAERzaGQDaTY0AAASZW9zaW9fZ2xvYmFsX3N0YXRlAAAAQERzaGQDaTY0AAATZW9zaW9fZ2xvYmFsX3N0YXRlMgAAAGBEc2hkA2k2NAAAE2Vvc2lvX2dsb2JhbF9zdGF0ZTMAAAA4uaOkmQNpNjQAAAhuYW1lX2JpZAAAwFchneitA2k2NAAADXByb2R1Y2VyX2luZm8AgMBXIZ3orQNpNjQAAA5wcm9kdWNlcl9pbmZvMgAAyApeI6W5A2k2NAAADmV4Y2hhbmdlX3N0YXRlAAAAAKepl7oDaTY0AAAOcmVmdW5kX3JlcXVlc3QAAAAAq3sV1gNpNjQAAA51c2VyX3Jlc291cmNlcwAAAADgqzLdA2k2NAAACnZvdGVyX2luZm8AAAAA=\"\n"
                + "}";
        final GetRawAbiResponse getRawAbiZswChainBadResponse = gson.fromJson(getRawAbiZswChainBadJson, GetRawAbiResponse.class);

        String getRawAbiZswChainBlankJson = "{\n"
                + "    \"account_name\": \"blank\",\n"
                + "    \"code_hash\": \"add7914493bb911bbc179b19115032bbaae1f567f733391060edfaf79a6c8096\",\n"
                + "    \"abi_hash\": \"d745bac0c38f95613e0c1c2da58e92de1e8e94d658d64a00293570cc251d1441\",\n"
                + "    \"abi\": \"\"\n"
                + "}";
        final GetRawAbiResponse getRawAbiZswChainBlankResponse = gson.fromJson(getRawAbiZswChainBlankJson, GetRawAbiResponse.class);

        try {
            when(mockRpcProvider.getRawAbi(any(GetRawAbiRequest.class))).thenAnswer(
                    new Answer<GetRawAbiResponse>() {
                        @Override
                        public GetRawAbiResponse answer(InvocationOnMock invocation)
                                throws Throwable {
                            GetRawAbiRequest request = (GetRawAbiRequest)invocation.getArgument(0);
                            GetRawAbiResponse response = null;
                            switch (request.getAccountName()) {
                                case "zswhq":
                                    response = getRawAbiZswChainResponse;
                                    break;
                                case "zswhq.token":
                                    response = getRawAbiZswChainTokenResponse;
                                    break;
                                case "zswhq.bad":
                                    response = getRawAbiZswChainBadResponse;
                                    break;
                                case "blank":
                                    response = getRawAbiZswChainBlankResponse;
                                    break;
                                case "name.err":
                                    response = getRawAbiZswChainResponse;
                                    break;
                                default:
                                    response = getRawAbiZswChainTokenResponse;
                                    break;
                            }
                            return response;
                        }
                    }
            );
        } catch (Exception ex) {
            fail("Error creating GetRawAbiResponse for mocking.");
        }

        mockSerializationProvider = mock(ISerializationProvider.class);

        String zswhqTokenAbiHexString = "0e656f73696f3a3a6162692f312e30010c6163636f756e745f6e616d65046e616d6505087472616e7366657200040466726f6d0c6163636f756e745f6e616d6502746f0c6163636f756e745f6e616d65087175616e74697479056173736574046d656d6f06737472696e67066372656174650002066973737565720c6163636f756e745f6e616d650e6d6178696d756d5f737570706c79056173736574056973737565000302746f0c6163636f756e745f6e616d65087175616e74697479056173736574046d656d6f06737472696e67076163636f756e7400010762616c616e63650561737365740e63757272656e63795f7374617473000306737570706c790561737365740a6d61785f737570706c79056173736574066973737565720c6163636f756e745f6e616d6503000000572d3ccdcd087472616e73666572bc072d2d2d0a7469746c653a20546f6b656e205472616e736665720a73756d6d6172793a205472616e7366657220746f6b656e732066726f6d206f6e65206163636f756e7420746f20616e6f746865722e0a69636f6e3a2068747470733a2f2f63646e2e746573746e65742e6465762e62316f70732e6e65742f746f6b656e2d7472616e736665722e706e6723636535316566396639656563613334333465383535303765306564343965373666666631323635343232626465643032353566333139366561353963386230630a2d2d2d0a0a2323205472616e73666572205465726d73202620436f6e646974696f6e730a0a492c207b7b66726f6d7d7d2c20636572746966792074686520666f6c6c6f77696e6720746f206265207472756520746f207468652062657374206f66206d79206b6e6f776c656467653a0a0a312e204920636572746966792074686174207b7b7175616e746974797d7d206973206e6f74207468652070726f6365656473206f66206672617564756c656e74206f722076696f6c656e7420616374697669746965732e0a322e2049206365727469667920746861742c20746f207468652062657374206f66206d79206b6e6f776c656467652c207b7b746f7d7d206973206e6f7420737570706f7274696e6720696e6974696174696f6e206f662076696f6c656e636520616761696e7374206f74686572732e0a332e2049206861766520646973636c6f73656420616e7920636f6e747261637475616c207465726d73202620636f6e646974696f6e732077697468207265737065637420746f207b7b7175616e746974797d7d20746f207b7b746f7d7d2e0a0a4920756e6465727374616e6420746861742066756e6473207472616e736665727320617265206e6f742072657665727369626c6520616674657220746865207b7b247472616e73616374696f6e2e64656c61795f7365637d7d207365636f6e6473206f72206f746865722064656c617920617320636f6e66696775726564206279207b7b66726f6d7d7d2773207065726d697373696f6e732e0a0a4966207468697320616374696f6e206661696c7320746f20626520697272657665727369626c7920636f6e6669726d656420616674657220726563656976696e6720676f6f6473206f722073657276696365732066726f6d20277b7b746f7d7d272c204920616772656520746f206569746865722072657475726e2074686520676f6f6473206f72207365727669636573206f7220726573656e64207b7b7175616e746974797d7d20696e20612074696d656c79206d616e6e65722e0000000000a531760569737375650000000000a86cd445066372656174650002000000384f4d113203693634010863757272656e6379010675696e743634076163636f756e740000000000904dc603693634010863757272656e6379010675696e7436340e63757272656e63795f737461747300000000";
        zswhqTokenAbiJsonString = "{\"version\":\"zswhq::abi/1.0\",\"types\":[{\"new_type_name\":\"account_name\",\"type\":\"name\"}],\"structs\":[{\"name\":\"transfer\",\"base\":\"\",\"fields\":[{\"name\":\"from\",\"type\":\"account_name\"},{\"name\":\"to\",\"type\":\"account_name\"},{\"name\":\"quantity\",\"type\":\"asset\"},{\"name\":\"memo\",\"type\":\"string\"}]},{\"name\":\"create\",\"base\":\"\",\"fields\":[{\"name\":\"issuer\",\"type\":\"account_name\"},{\"name\":\"maximum_supply\",\"type\":\"asset\"}]},{\"name\":\"issue\",\"base\":\"\",\"fields\":[{\"name\":\"to\",\"type\":\"account_name\"},{\"name\":\"quantity\",\"type\":\"asset\"},{\"name\":\"memo\",\"type\":\"string\"}]},{\"name\":\"account\",\"base\":\"\",\"fields\":[{\"name\":\"balance\",\"type\":\"asset\"}]},{\"name\":\"currency_stats\",\"base\":\"\",\"fields\":[{\"name\":\"supply\",\"type\":\"asset\"},{\"name\":\"max_supply\",\"type\":\"asset\"},{\"name\":\"issuer\",\"type\":\"account_name\"}]}],\"actions\":[{\"name\":\"transfer\",\"type\":\"transfer\",\"ricardian_contract\":\"---\\ntitle: Token Transfer\\nsummary: Transfer tokens from one account to another.\\nicon: https://cdn.testnet.dev.b1ops.net/token-transfer.png#ce51ef9f9eeca3434e85507e0ed49e76fff1265422bded0255f3196ea59c8b0c\\n---\\n\\n## Transfer Terms & Conditions\\n\\nI, {{from}}, certify the following to be true to the best of my knowledge:\\n\\n1. I certify that {{quantity}} is not the proceeds of fraudulent or violent activities.\\n2. I certify that, to the best of my knowledge, {{to}} is not supporting initiation of violence against others.\\n3. I have disclosed any contractual terms & conditions with respect to {{quantity}} to {{to}}.\\n\\nI understand that funds transfers are not reversible after the {{$transaction.delay_sec}} seconds or other delay as configured by {{from}}'s permissions.\\n\\nIf this action fails to be irreversibly confirmed after receiving goods or services from '{{to}}', I agree to either return the goods or services or resend {{quantity}} in a timely manner.\"},{\"name\":\"issue\",\"type\":\"issue\",\"ricardian_contract\":\"\"},{\"name\":\"create\",\"type\":\"create\",\"ricardian_contract\":\"\"}],\"tables\":[{\"name\":\"accounts\",\"index_type\":\"i64\",\"key_names\":[\"currency\"],\"key_types\":[\"uint64\"],\"type\":\"account\"},{\"name\":\"stat\",\"index_type\":\"i64\",\"key_names\":[\"currency\"],\"key_types\":[\"uint64\"],\"type\":\"currency_stats\"}],\"ricardian_clauses\":[],\"error_messages\":[],\"abi_extensions\":[],\"variants\":[]}";

        String zswhqAbiHexString = "";
        zswhqAbiJsonString = "{\"version\":\"zswhq::abi/1.1\",\"types\":[],\"structs\":[{\"name\":\"abi_hash\",\"base\":\"\",\"fields\":[{\"name\":\"owner\",\"type\":\"name\"},{\"name\":\"hash\",\"type\":\"checksum256\"}]},{\"name\":\"authority\",\"base\":\"\",\"fields\":[{\"name\":\"threshold\",\"type\":\"uint32\"},{\"name\":\"keys\",\"type\":\"key_weight[]\"},{\"name\":\"accounts\",\"type\":\"permission_level_weight[]\"},{\"name\":\"waits\",\"type\":\"wait_weight[]\"}]},{\"name\":\"bid_refund\",\"base\":\"\",\"fields\":[{\"name\":\"bidder\",\"type\":\"name\"},{\"name\":\"amount\",\"type\":\"asset\"}]},{\"name\":\"bidname\",\"base\":\"\",\"fields\":[{\"name\":\"bidder\",\"type\":\"name\"},{\"name\":\"newname\",\"type\":\"name\"},{\"name\":\"bid\",\"type\":\"asset\"}]},{\"name\":\"bidrefund\",\"base\":\"\",\"fields\":[{\"name\":\"bidder\",\"type\":\"name\"},{\"name\":\"newname\",\"type\":\"name\"}]},{\"name\":\"block_header\",\"base\":\"\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"uint32\"},{\"name\":\"producer\",\"type\":\"name\"},{\"name\":\"confirmed\",\"type\":\"uint16\"},{\"name\":\"previous\",\"type\":\"checksum256\"},{\"name\":\"transaction_mroot\",\"type\":\"checksum256\"},{\"name\":\"action_mroot\",\"type\":\"checksum256\"},{\"name\":\"schedule_version\",\"type\":\"uint32\"},{\"name\":\"new_producers\",\"type\":\"producer_schedule?\"}]},{\"name\":\"blockchain_parameters\",\"base\":\"\",\"fields\":[{\"name\":\"max_block_net_usage\",\"type\":\"uint64\"},{\"name\":\"target_block_net_usage_pct\",\"type\":\"uint32\"},{\"name\":\"max_transaction_net_usage\",\"type\":\"uint32\"},{\"name\":\"base_per_transaction_net_usage\",\"type\":\"uint32\"},{\"name\":\"net_usage_leeway\",\"type\":\"uint32\"},{\"name\":\"context_free_discount_net_usage_num\",\"type\":\"uint32\"},{\"name\":\"context_free_discount_net_usage_den\",\"type\":\"uint32\"},{\"name\":\"max_block_cpu_usage\",\"type\":\"uint32\"},{\"name\":\"target_block_cpu_usage_pct\",\"type\":\"uint32\"},{\"name\":\"max_transaction_cpu_usage\",\"type\":\"uint32\"},{\"name\":\"min_transaction_cpu_usage\",\"type\":\"uint32\"},{\"name\":\"max_transaction_lifetime\",\"type\":\"uint32\"},{\"name\":\"deferred_trx_expiration_window\",\"type\":\"uint32\"},{\"name\":\"max_transaction_delay\",\"type\":\"uint32\"},{\"name\":\"max_inline_action_size\",\"type\":\"uint32\"},{\"name\":\"max_inline_action_depth\",\"type\":\"uint16\"},{\"name\":\"max_authority_depth\",\"type\":\"uint16\"}]},{\"name\":\"buyram\",\"base\":\"\",\"fields\":[{\"name\":\"payer\",\"type\":\"name\"},{\"name\":\"receiver\",\"type\":\"name\"},{\"name\":\"quant\",\"type\":\"asset\"}]},{\"name\":\"buyrambytes\",\"base\":\"\",\"fields\":[{\"name\":\"payer\",\"type\":\"name\"},{\"name\":\"receiver\",\"type\":\"name\"},{\"name\":\"bytes\",\"type\":\"uint32\"}]},{\"name\":\"canceldelay\",\"base\":\"\",\"fields\":[{\"name\":\"canceling_auth\",\"type\":\"permission_level\"},{\"name\":\"trx_id\",\"type\":\"checksum256\"}]},{\"name\":\"claimrewards\",\"base\":\"\",\"fields\":[{\"name\":\"owner\",\"type\":\"name\"}]},{\"name\":\"connector\",\"base\":\"\",\"fields\":[{\"name\":\"balance\",\"type\":\"asset\"},{\"name\":\"weight\",\"type\":\"float64\"}]},{\"name\":\"delegatebw\",\"base\":\"\",\"fields\":[{\"name\":\"from\",\"type\":\"name\"},{\"name\":\"receiver\",\"type\":\"name\"},{\"name\":\"stake_net_quantity\",\"type\":\"asset\"},{\"name\":\"stake_cpu_quantity\",\"type\":\"asset\"},{\"name\":\"transfer\",\"type\":\"bool\"}]},{\"name\":\"delegated_bandwidth\",\"base\":\"\",\"fields\":[{\"name\":\"from\",\"type\":\"name\"},{\"name\":\"to\",\"type\":\"name\"},{\"name\":\"net_weight\",\"type\":\"asset\"},{\"name\":\"cpu_weight\",\"type\":\"asset\"}]},{\"name\":\"deleteauth\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"name\"},{\"name\":\"permission\",\"type\":\"name\"}]},{\"name\":\"zswhq_global_state\",\"base\":\"blockchain_parameters\",\"fields\":[{\"name\":\"max_ram_size\",\"type\":\"uint64\"},{\"name\":\"total_ram_bytes_reserved\",\"type\":\"uint64\"},{\"name\":\"total_ram_stake\",\"type\":\"int64\"},{\"name\":\"last_producer_schedule_update\",\"type\":\"block_timestamp_type\"},{\"name\":\"last_pervote_bucket_fill\",\"type\":\"time_point\"},{\"name\":\"pervote_bucket\",\"type\":\"int64\"},{\"name\":\"perblock_bucket\",\"type\":\"int64\"},{\"name\":\"total_unpaid_blocks\",\"type\":\"uint32\"},{\"name\":\"total_activated_stake\",\"type\":\"int64\"},{\"name\":\"thresh_activated_stake_time\",\"type\":\"time_point\"},{\"name\":\"last_producer_schedule_size\",\"type\":\"uint16\"},{\"name\":\"total_producer_vote_weight\",\"type\":\"float64\"},{\"name\":\"last_name_close\",\"type\":\"block_timestamp_type\"}]},{\"name\":\"zswhq_global_state2\",\"base\":\"\",\"fields\":[{\"name\":\"new_ram_per_block\",\"type\":\"uint16\"},{\"name\":\"last_ram_increase\",\"type\":\"block_timestamp_type\"},{\"name\":\"last_block_num\",\"type\":\"block_timestamp_type\"},{\"name\":\"total_producer_votepay_share\",\"type\":\"float64\"},{\"name\":\"revision\",\"type\":\"uint8\"}]},{\"name\":\"zswhq_global_state3\",\"base\":\"\",\"fields\":[{\"name\":\"last_vpay_state_update\",\"type\":\"time_point\"},{\"name\":\"total_vpay_share_change_rate\",\"type\":\"float64\"}]},{\"name\":\"exchange_state\",\"base\":\"\",\"fields\":[{\"name\":\"supply\",\"type\":\"asset\"},{\"name\":\"base\",\"type\":\"connector\"},{\"name\":\"quote\",\"type\":\"connector\"}]},{\"name\":\"init\",\"base\":\"\",\"fields\":[{\"name\":\"version\",\"type\":\"varuint32\"},{\"name\":\"core\",\"type\":\"symbol\"}]},{\"name\":\"key_weight\",\"base\":\"\",\"fields\":[{\"name\":\"key\",\"type\":\"public_key\"},{\"name\":\"weight\",\"type\":\"uint16\"}]},{\"name\":\"linkauth\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"name\"},{\"name\":\"code\",\"type\":\"name\"},{\"name\":\"type\",\"type\":\"name\"},{\"name\":\"requirement\",\"type\":\"name\"}]},{\"name\":\"name_bid\",\"base\":\"\",\"fields\":[{\"name\":\"newname\",\"type\":\"name\"},{\"name\":\"high_bidder\",\"type\":\"name\"},{\"name\":\"high_bid\",\"type\":\"int64\"},{\"name\":\"last_bid_time\",\"type\":\"time_point\"}]},{\"name\":\"newaccount\",\"base\":\"\",\"fields\":[{\"name\":\"creator\",\"type\":\"name\"},{\"name\":\"name\",\"type\":\"name\"},{\"name\":\"owner\",\"type\":\"authority\"},{\"name\":\"active\",\"type\":\"authority\"}]},{\"name\":\"onblock\",\"base\":\"\",\"fields\":[{\"name\":\"header\",\"type\":\"block_header\"}]},{\"name\":\"onerror\",\"base\":\"\",\"fields\":[{\"name\":\"sender_id\",\"type\":\"uint128\"},{\"name\":\"sent_trx\",\"type\":\"bytes\"}]},{\"name\":\"permission_level\",\"base\":\"\",\"fields\":[{\"name\":\"actor\",\"type\":\"name\"},{\"name\":\"permission\",\"type\":\"name\"}]},{\"name\":\"permission_level_weight\",\"base\":\"\",\"fields\":[{\"name\":\"permission\",\"type\":\"permission_level\"},{\"name\":\"weight\",\"type\":\"uint16\"}]},{\"name\":\"producer_info\",\"base\":\"\",\"fields\":[{\"name\":\"owner\",\"type\":\"name\"},{\"name\":\"total_votes\",\"type\":\"float64\"},{\"name\":\"producer_key\",\"type\":\"public_key\"},{\"name\":\"is_active\",\"type\":\"bool\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"unpaid_blocks\",\"type\":\"uint32\"},{\"name\":\"last_claim_time\",\"type\":\"time_point\"},{\"name\":\"location\",\"type\":\"uint16\"}]},{\"name\":\"producer_info2\",\"base\":\"\",\"fields\":[{\"name\":\"owner\",\"type\":\"name\"},{\"name\":\"votepay_share\",\"type\":\"float64\"},{\"name\":\"last_votepay_share_update\",\"type\":\"time_point\"}]},{\"name\":\"producer_key\",\"base\":\"\",\"fields\":[{\"name\":\"producer_name\",\"type\":\"name\"},{\"name\":\"block_signing_key\",\"type\":\"public_key\"}]},{\"name\":\"producer_schedule\",\"base\":\"\",\"fields\":[{\"name\":\"version\",\"type\":\"uint32\"},{\"name\":\"producers\",\"type\":\"producer_key[]\"}]},{\"name\":\"refund\",\"base\":\"\",\"fields\":[{\"name\":\"owner\",\"type\":\"name\"}]},{\"name\":\"refund_request\",\"base\":\"\",\"fields\":[{\"name\":\"owner\",\"type\":\"name\"},{\"name\":\"request_time\",\"type\":\"time_point_sec\"},{\"name\":\"net_amount\",\"type\":\"asset\"},{\"name\":\"cpu_amount\",\"type\":\"asset\"}]},{\"name\":\"regproducer\",\"base\":\"\",\"fields\":[{\"name\":\"producer\",\"type\":\"name\"},{\"name\":\"producer_key\",\"type\":\"public_key\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"location\",\"type\":\"uint16\"}]},{\"name\":\"regproxy\",\"base\":\"\",\"fields\":[{\"name\":\"proxy\",\"type\":\"name\"},{\"name\":\"isproxy\",\"type\":\"bool\"}]},{\"name\":\"rmvproducer\",\"base\":\"\",\"fields\":[{\"name\":\"producer\",\"type\":\"name\"}]},{\"name\":\"sellram\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"name\"},{\"name\":\"bytes\",\"type\":\"int64\"}]},{\"name\":\"setabi\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"name\"},{\"name\":\"abi\",\"type\":\"bytes\"}]},{\"name\":\"setalimits\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"name\"},{\"name\":\"ram_bytes\",\"type\":\"int64\"},{\"name\":\"net_weight\",\"type\":\"int64\"},{\"name\":\"cpu_weight\",\"type\":\"int64\"}]},{\"name\":\"setcode\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"name\"},{\"name\":\"vmtype\",\"type\":\"uint8\"},{\"name\":\"vmversion\",\"type\":\"uint8\"},{\"name\":\"code\",\"type\":\"bytes\"}]},{\"name\":\"setparams\",\"base\":\"\",\"fields\":[{\"name\":\"params\",\"type\":\"blockchain_parameters\"}]},{\"name\":\"setpriv\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"name\"},{\"name\":\"is_priv\",\"type\":\"uint8\"}]},{\"name\":\"setram\",\"base\":\"\",\"fields\":[{\"name\":\"max_ram_size\",\"type\":\"uint64\"}]},{\"name\":\"setramrate\",\"base\":\"\",\"fields\":[{\"name\":\"bytes_per_block\",\"type\":\"uint16\"}]},{\"name\":\"undelegatebw\",\"base\":\"\",\"fields\":[{\"name\":\"from\",\"type\":\"name\"},{\"name\":\"receiver\",\"type\":\"name\"},{\"name\":\"unstake_net_quantity\",\"type\":\"asset\"},{\"name\":\"unstake_cpu_quantity\",\"type\":\"asset\"}]},{\"name\":\"unlinkauth\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"name\"},{\"name\":\"code\",\"type\":\"name\"},{\"name\":\"type\",\"type\":\"name\"}]},{\"name\":\"unregprod\",\"base\":\"\",\"fields\":[{\"name\":\"producer\",\"type\":\"name\"}]},{\"name\":\"updateauth\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"name\"},{\"name\":\"permission\",\"type\":\"name\"},{\"name\":\"parent\",\"type\":\"name\"},{\"name\":\"auth\",\"type\":\"authority\"}]},{\"name\":\"updtrevision\",\"base\":\"\",\"fields\":[{\"name\":\"revision\",\"type\":\"uint8\"}]},{\"name\":\"user_resources\",\"base\":\"\",\"fields\":[{\"name\":\"owner\",\"type\":\"name\"},{\"name\":\"net_weight\",\"type\":\"asset\"},{\"name\":\"cpu_weight\",\"type\":\"asset\"},{\"name\":\"ram_bytes\",\"type\":\"int64\"}]},{\"name\":\"voteproducer\",\"base\":\"\",\"fields\":[{\"name\":\"voter\",\"type\":\"name\"},{\"name\":\"proxy\",\"type\":\"name\"},{\"name\":\"producers\",\"type\":\"name[]\"}]},{\"name\":\"voter_info\",\"base\":\"\",\"fields\":[{\"name\":\"owner\",\"type\":\"name\"},{\"name\":\"proxy\",\"type\":\"name\"},{\"name\":\"producers\",\"type\":\"name[]\"},{\"name\":\"staked\",\"type\":\"int64\"},{\"name\":\"last_vote_weight\",\"type\":\"float64\"},{\"name\":\"proxied_vote_weight\",\"type\":\"float64\"},{\"name\":\"is_proxy\",\"type\":\"bool\"},{\"name\":\"reserved1\",\"type\":\"uint32\"},{\"name\":\"reserved2\",\"type\":\"uint32\"},{\"name\":\"reserved3\",\"type\":\"asset\"}]},{\"name\":\"wait_weight\",\"base\":\"\",\"fields\":[{\"name\":\"wait_sec\",\"type\":\"uint32\"},{\"name\":\"weight\",\"type\":\"uint16\"}]}],\"actions\":[{\"name\":\"bidname\",\"type\":\"bidname\",\"ricardian_contract\":\"\"},{\"name\":\"bidrefund\",\"type\":\"bidrefund\",\"ricardian_contract\":\"\"},{\"name\":\"buyram\",\"type\":\"buyram\",\"ricardian_contract\":\"\"},{\"name\":\"buyrambytes\",\"type\":\"buyrambytes\",\"ricardian_contract\":\"\"},{\"name\":\"canceldelay\",\"type\":\"canceldelay\",\"ricardian_contract\":\"\"},{\"name\":\"claimrewards\",\"type\":\"claimrewards\",\"ricardian_contract\":\"\"},{\"name\":\"delegatebw\",\"type\":\"delegatebw\",\"ricardian_contract\":\"\"},{\"name\":\"deleteauth\",\"type\":\"deleteauth\",\"ricardian_contract\":\"\"},{\"name\":\"init\",\"type\":\"init\",\"ricardian_contract\":\"\"},{\"name\":\"linkauth\",\"type\":\"linkauth\",\"ricardian_contract\":\"\"},{\"name\":\"newaccount\",\"type\":\"newaccount\",\"ricardian_contract\":\"\"},{\"name\":\"onblock\",\"type\":\"onblock\",\"ricardian_contract\":\"\"},{\"name\":\"onerror\",\"type\":\"onerror\",\"ricardian_contract\":\"\"},{\"name\":\"refund\",\"type\":\"refund\",\"ricardian_contract\":\"\"},{\"name\":\"regproducer\",\"type\":\"regproducer\",\"ricardian_contract\":\"\"},{\"name\":\"regproxy\",\"type\":\"regproxy\",\"ricardian_contract\":\"\"},{\"name\":\"rmvproducer\",\"type\":\"rmvproducer\",\"ricardian_contract\":\"\"},{\"name\":\"sellram\",\"type\":\"sellram\",\"ricardian_contract\":\"\"},{\"name\":\"setabi\",\"type\":\"setabi\",\"ricardian_contract\":\"\"},{\"name\":\"setalimits\",\"type\":\"setalimits\",\"ricardian_contract\":\"\"},{\"name\":\"setcode\",\"type\":\"setcode\",\"ricardian_contract\":\"\"},{\"name\":\"setparams\",\"type\":\"setparams\",\"ricardian_contract\":\"\"},{\"name\":\"setpriv\",\"type\":\"setpriv\",\"ricardian_contract\":\"\"},{\"name\":\"setram\",\"type\":\"setram\",\"ricardian_contract\":\"\"},{\"name\":\"setramrate\",\"type\":\"setramrate\",\"ricardian_contract\":\"\"},{\"name\":\"undelegatebw\",\"type\":\"undelegatebw\",\"ricardian_contract\":\"\"},{\"name\":\"unlinkauth\",\"type\":\"unlinkauth\",\"ricardian_contract\":\"\"},{\"name\":\"unregprod\",\"type\":\"unregprod\",\"ricardian_contract\":\"\"},{\"name\":\"updateauth\",\"type\":\"updateauth\",\"ricardian_contract\":\"\"},{\"name\":\"updtrevision\",\"type\":\"updtrevision\",\"ricardian_contract\":\"\"},{\"name\":\"voteproducer\",\"type\":\"voteproducer\",\"ricardian_contract\":\"\"}],\"tables\":[{\"name\":\"abihash\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"abi_hash\"},{\"name\":\"bidrefunds\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"bid_refund\"},{\"name\":\"delband\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"delegated_bandwidth\"},{\"name\":\"global\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"zswhq_global_state\"},{\"name\":\"global2\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"zswhq_global_state2\"},{\"name\":\"global3\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"zswhq_global_state3\"},{\"name\":\"namebids\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"name_bid\"},{\"name\":\"producers\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"producer_info\"},{\"name\":\"producers2\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"producer_info2\"},{\"name\":\"rammarket\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"exchange_state\"},{\"name\":\"refunds\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"refund_request\"},{\"name\":\"userres\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"user_resources\"},{\"name\":\"voters\",\"index_type\":\"i64\",\"key_names\":[],\"key_types\":[],\"type\":\"voter_info\"}],\"ricardian_clauses\":[],\"error_messages\":[],\"abi_extensions\":[],\"variants\":[]}";

        try {
            when(mockSerializationProvider.deserializeAbi(zswhqTokenAbiHexString)).thenReturn(zswhqTokenAbiJsonString);
            when(mockSerializationProvider.deserializeAbi(zswhqAbiHexString)).thenReturn(zswhqAbiJsonString);
        } catch (Exception ex) {
            fail("Error creating deserializeAbi response for mocking.");
        }
    }

    @Test
    public void testGetAbi() {
        IABIProvider abiProvider = new ABIProviderImpl(mockRpcProvider, mockSerializationProvider);
        try {

            String testAbiZswChainTokenJson = abiProvider
                    .getAbi(chainId, new ZSWName("zswhq.token"));
            assertEquals(zswhqTokenAbiJsonString, testAbiZswChainTokenJson);

            String testAbiZswChainJson = abiProvider
                    .getAbi(chainId, new ZSWName("zswhq"));
            assertEquals(zswhqAbiJsonString, testAbiZswChainJson);

        } catch (Exception ex) {
            fail("ABI provider should not throw error: " + ex.getLocalizedMessage());
        }
    }

    @Test
    public void testGetBadAbi() {
        IABIProvider abiProvider = new ABIProviderImpl(mockRpcProvider, mockSerializationProvider);
        try {
            String testAbiZswChainJson = abiProvider
                    .getAbi(chainId, new ZSWName("zswhq.bad"));
            fail("Should throw an error because of bad base64 data.");
        } catch (Exception ex) {
            assertEquals("Error retrieving ABI from the chain.", ex.getLocalizedMessage());
            assertNotNull(ex.getCause());
            assertEquals("unable to decode base64 string: invalid characters encountered in base64 data", ex.getCause().getLocalizedMessage());
            return;
        }
    }

    @Test
    public void testGetBlankAbi() {
        IABIProvider abiProvider = new ABIProviderImpl(mockRpcProvider, mockSerializationProvider);
        try {
            String testAbiZswChainJson = abiProvider
                    .getAbi(chainId, new ZSWName("blank"));
            fail("Should throw an error because of blank base64 data.");
        } catch (Exception ex) {
            assertEquals("Error retrieving ABI from the chain.", ex.getLocalizedMessage());
            assertNotNull(ex.getCause());
            assertEquals("Missing ABI from GetRawAbiResponse.", ex.getCause().getLocalizedMessage());
            return;
        }
    }

    @Test
    public void testGetIncorrectAccountNameAbi() {
        IABIProvider abiProvider = new ABIProviderImpl(mockRpcProvider, mockSerializationProvider);
        try {
            String testAbiZswChainJson = abiProvider
                    .getAbi(chainId, new ZSWName("name.err"));
            fail("Should throw an error because of account name mismatch.");
        } catch (Exception ex) {
            assertEquals("Error retrieving ABI from the chain.", ex.getLocalizedMessage());
            assertNotNull(ex.getCause());
            assertEquals("Requested account name does not match returned account name.", ex.getCause().getLocalizedMessage());
            return;
        }
    }

    @Test
    public void testGetAbis() {
        IABIProvider abiProvider = new ABIProviderImpl(mockRpcProvider, mockSerializationProvider);
        try {
            List<ZSWName> account_names = Arrays.asList(new ZSWName("zswhq"),
                    new ZSWName("zswhq.token"));
            Map<String, String> accounts = abiProvider.getAbis(chainId, account_names);
            assertNotNull(accounts);
            assertTrue(accounts.containsKey("zswhq.token"));
            assertTrue(accounts.containsKey("zswhq"));
            assertEquals(zswhqTokenAbiJsonString, accounts.get("zswhq.token"));
            assertEquals(zswhqAbiJsonString, accounts.get("zswhq"));
        } catch (Exception ex) {
            fail("ABI provider should not throw error: " + ex.getLocalizedMessage());
        }
    }

    @Test
    public void testGetAbiAsync() {
        final CountDownLatch testLock = new CountDownLatch(1);
        final String[] retrievedZswChainAbiJsonStrings = {new String()};

        ListeningExecutorService service = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(10));
        ListenableFuture<String> getZswChainAbiFuture = service.submit(new Callable<String>() {
            @Override
            public String call() throws Exception {
                // Its not thread safe to use the global mocks like this but we're not trying to
                // run concurrent calls.
                IABIProvider abiProvider = new ABIProviderImpl(mockRpcProvider, mockSerializationProvider);
                return abiProvider.getAbi(chainId, new ZSWName("zswhq"));
            }
        });
        Futures.addCallback(getZswChainAbiFuture, new FutureCallback<String>() {
            @Override
            public void onSuccess(@NullableDecl String result) {
                retrievedZswChainAbiJsonStrings[0] = result;
                testLock.countDown();
            }

            @Override
            public void onFailure(Throwable t) {
                testLock.countDown();
            }
        }, MoreExecutors.directExecutor());

        try {
            testLock.await(2000, TimeUnit.MILLISECONDS);
            assertNotNull(retrievedZswChainAbiJsonStrings[0]);
            assertFalse(retrievedZswChainAbiJsonStrings[0].isEmpty());
            assertEquals(zswhqAbiJsonString, retrievedZswChainAbiJsonStrings[0]);
        } catch (InterruptedException interruptedException) {
            fail("Interrupted waiting for getAbi() to complete: " +
                    interruptedException.getLocalizedMessage());
        }
    }
}
